<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haroy</title>
  
  <subtitle>舒豪的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shuxiaohao.github.io/"/>
  <updated>2018-09-22T06:51:41.756Z</updated>
  <id>http://shuxiaohao.github.io/</id>
  
  <author>
    <name>Shu Hao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx网站架构总结</title>
    <link href="http://shuxiaohao.github.io/2018/09/08/Nginx%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%80%BB%E7%BB%93/"/>
    <id>http://shuxiaohao.github.io/2018/09/08/Nginx网站架构总结/</id>
    <published>2018-09-08T03:30:47.000Z</published>
    <updated>2018-09-22T06:51:41.756Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script> <span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/images/nginx/nginx.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><blockquote><p>单台服务器已经无法承担大量用户的并发访问，必须采用多台服务器协同工作，以提高计算机系统的处理能力和计算强度（集群），满足当前业务量的需求。如何完成同样功能的多个网络设备之间实现合理的业务量分配——负载均衡。</p></blockquote><a id="more"></a><h1 id="Nginx应用场景"><a href="#Nginx应用场景" class="headerlink" title="Nginx应用场景"></a>Nginx应用场景</h1><h2 id="静态HTTP服务器"><a href="#静态HTTP服务器" class="headerlink" title="静态HTTP服务器"></a>静态HTTP服务器</h2><blockquote><p>首先，Nginx是一个HTTP服务器，可以将服务器上的静态文件（如HTML、图片）通过HTTP协议展现给客户端。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80; # 端口号</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /usr/share/nginx/html; # 静态文件路径</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><blockquote><p>有的网站访问量大，需要负载均衡。然而并不是所有网站都如此出色，有的网站，由于访问量太小，需要节省成本，将多个网站部署在同一台服务器上。<br> 例如将<code>www.aaa.com</code>和<code>www.bbb.com</code>两个网站部署在同一台服务器上，两个域名解析到同一个IP地址，但是用户通过两个域名却可以打开两个完全不同的网站，互相不影响，就像访问两个服务器一样，所以叫两个虚拟主机。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    server_name _;</span><br><span class="line">    return 444; # 过滤其他域名的请求，返回444状态码</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.aaa.com; # www.aaa.com域名</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:8080; # 对应端口号8080</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.bbb.com; # www.bbb.com域名</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:8081; # 对应端口号8081</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在服务器8080和8081分别开了一个应用，客户端通过不同的域名访问，根据server_name可以反向代理到对应的应用服务器。<br> 虚拟主机的原理是通过HTTP请求头中的Host是否匹配server_name来实现的，有兴趣的同学可以研究一下HTTP协议。<br> 另外，server_name配置还可以过滤有人恶意将某些域名指向你的主机服务器</p></blockquote><h2 id="反向代理，负载均衡"><a href="#反向代理，负载均衡" class="headerlink" title="反向代理，负载均衡"></a>反向代理，负载均衡</h2><blockquote><p>当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，<br>需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载，<br>不会因为某台服务器负载高宕机而某台服务器闲置的情况。</p></blockquote><h3 id="正向代理VS反向代理"><a href="#正向代理VS反向代理" class="headerlink" title="正向代理VS反向代理"></a>正向代理VS反向代理</h3><blockquote><p>反向代理是指：以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给Internet上请求链接的客户端。<br> 正向代理：代理服务器代理内部网络对Internet的连接请求，客户机必须指定代理服务器，并将本来要直接发送到Web服务器上的http请求发送到代理服务器中。因为请求哪个Web服务器是不确定的，而且这些Web服务器并没有配置这个代理服务器，所以不支持外部对内部网络的访问请求</p></blockquote><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/images/nginx/nginx3.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/images/nginx/nginx4.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><h3 id="反向代理VS负载均衡"><a href="#反向代理VS负载均衡" class="headerlink" title="反向代理VS负载均衡"></a>反向代理VS负载均衡</h3><blockquote><p>反向代理，是把一些静态资源存储在服务器上，当用户有请求的时候，就直接返回反向代理服务器上的资源给用户，而如果反向代理服务器上没有的资源，就转发给后面的负载均衡服务器，负载均衡服务器再将请求分发给后端的web服务器。<br>区别就是：反向代理服务器是需要存储资源的，让用户更快速的接收到资源 负载均衡就是，为了保证后端web服务器的高可用，高并发，是不需要要存储资源，只需要转发用户的请求。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">upstream myapp &#123;</span><br><span class="line">    server 192.168.0.111:8080; # 应用服务器1</span><br><span class="line">    server 192.168.0.112:8080; # 应用服务器2</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://myweb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="负载均衡策略-算法"><a href="#负载均衡策略-算法" class="headerlink" title="负载均衡策略/算法"></a>负载均衡策略/算法</h3><blockquote><ul><li>轮询：依次分发到每台应用服务器上，所以每台处理请求数相同</li><li>加权轮询：按照配置的权重将请求分发，高性能的服务器分配更多请求。</li><li>随机：随机分配</li><li>加权随机：</li><li>最少连接：记录每个应用服务器正在处理的连接数，将新的请求分发到最少连接的服务器上。</li><li>加权最少连接</li><li>源地址散列：根据来源的IP地址进行Hash计算得到应用服务器，这样来自同一个IP地址的请求总在同一个服务器上处理。该请求的上下文信息可以存储在这台服务器上</li></ul></blockquote><h2 id="Nginx实践"><a href="#Nginx实践" class="headerlink" title="Nginx实践"></a>Nginx实践</h2><h3 id="session共享问题"><a href="#session共享问题" class="headerlink" title="session共享问题"></a>session共享问题</h3><blockquote><ol><li>不使用session，换用cookie,这样虽然实现简单，但是把session存在客户端会有很大的问题，如果客户端把cookie禁掉了的话，那么session就无从同步了，这样会给网站带来损失；cookie的安全性不高，虽然它已经加了密，但是还是可以伪造的。</li><li>可以通过ip_hash，将某个ip的请求定向到同一台后端应用服务器。但是这样可能会失去负载均衡的意义，因为有可能有的ip请求会很大，但是都分发到了一个服务器处理。</li><li>session复制，通过一次产生session就把这个session复制到其他服务器中，这样也会解决session一致性问题，但是这个会占用比较大的资源。</li><li>通过中间间做session缓存如用redis，这样没错分发到的服务器都从缓存里取一下看是否有session存在，达到session一致性，当然这个就会额外增加网络请求。</li></ol></blockquote><h3 id="nginx双机高可用"><a href="#nginx双机高可用" class="headerlink" title="nginx双机高可用"></a>nginx双机高可用</h3><blockquote><p>防止一台nginx宕掉，加一台备用机。<br> 方案一：正常情况下只有一台用于负载均衡，另一台空闲。可以用keepalive软件实现一台出问题时切换到另一台。<br> 方案二：两台都用于负载均衡。</p></blockquote><h2 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h2><blockquote><ul><li>启动nginx:<code>nginx</code></li><li>停止nginx:<code>nginx -s stop</code> 强制停止，`nginx -s quit 优雅的退出</li><li>重载配置config:<code>nginx -s reload</code><div class="note info"><p><code>-s</code>都是采用向 Nginx 发送信号的方式</p></div></li><li>指定配置文件:<code>nginx -c /usr/local/......</code><div class="note info"><p><code>-c</code>表示configuration，指定配置文件</p></div></li><li>查看nginx版本信息:<code>nginx -v</code>,详细信息<code>nginx -V</code></li><li>检查配置文件是否正确:<code>nginx -t</code></li><li>显示帮助信息<code>nginx -h</code>或者<code>nginx -?</code></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/images/nginx/nginx.jpg&quot; class=&quot;full-image&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;blockquote&gt;
&lt;p&gt;单台服务器已经无法承担大量用户的并发访问，必须采用多台服务器协同工作，以提高计算机系统的处理能力和计算强度（集群），满足当前业务量的需求。如何完成同样功能的多个网络设备之间实现合理的业务量分配——负载均衡。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://shuxiaohao.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://shuxiaohao.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Git基础及常用命令总结</title>
    <link href="http://shuxiaohao.github.io/2018/09/03/Git%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://shuxiaohao.github.io/2018/09/03/Git基础及常用命令总结/</id>
    <published>2018-09-03T09:45:15.000Z</published>
    <updated>2018-09-21T14:09:40.352Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script> <span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/images/git/git_logo.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><a id="more"></a><div class="note success"><p>Git我已经用了很久了，但最近同事工作期间还会出现一些由于Git代码提交的冲突，带来一些麻烦。<br>    下面我会结合我所学知识，及对Git再系统学习后总结一下Git的一些基本流程及常用命令的一些用法。</p></div><h1 id="本地基本命令"><a href="#本地基本命令" class="headerlink" title="本地基本命令"></a>本地基本命令</h1><h2 id="Git常用命令速查表"><a href="#Git常用命令速查表" class="headerlink" title="Git常用命令速查表:"></a>Git常用命令速查表:</h2><p><img src="/images/git/git常用命令速查表.jpg" alt="git常用命令速查表"></p><h2 id="使用Git生成秘钥"><a href="#使用Git生成秘钥" class="headerlink" title="使用Git生成秘钥"></a>使用Git生成秘钥</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><h2 id="设置全局用户名和邮箱"><a href="#设置全局用户名和邮箱" class="headerlink" title="设置全局用户名和邮箱:"></a>设置全局用户名和邮箱:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;YourName&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;#添加指定文件到暂存区</span><br><span class="line">git add .#添加工作区所有文件到暂存区</span><br><span class="line">git add -i#交互方式添加文件到暂存区</span><br><span class="line">git add -u#将工作区中已经变动的文件添加到暂存区，当新增加的文件不会被添加</span><br></pre></td></tr></table></figure><h2 id="提交文件到本地仓库"><a href="#提交文件到本地仓库" class="headerlink" title="提交文件到本地仓库"></a>提交文件到本地仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;描述信息&quot;#提交更新</span><br><span class="line">git commit -am &quot;描述信息&quot;#如果工作目录中仅是已跟踪的文件被修改或被删除，使用此提交命令</span><br></pre></td></tr></table></figure><h2 id="分支的创建、删除、和平、切换、查看"><a href="#分支的创建、删除、和平、切换、查看" class="headerlink" title="分支的创建、删除、和平、切换、查看"></a>分支的创建、删除、和平、切换、查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git branch#查看Git仓库中已有的分支</span><br><span class="line">git branch 新分支名 [分支起点]#创建分支，如果没有分支起点的话，则默认在当前分支的最新提交上创建分支</span><br><span class="line">git checkout 分支名#切换分支</span><br><span class="line">git checkout -b 新分支名#创建同时切换到新分支</span><br><span class="line">git merge 要被合并的分支名#合并分支</span><br><span class="line">git branch -d 要删除的分支名#删除指定分支（如果分支没有被合并过，该命令会执行失败）</span><br><span class="line">git branch -D 要删除的分支名#删除指定分支，不管有没有被合并过</span><br><span class="line">gitk#用图形界面查看分支提交历史</span><br></pre></td></tr></table></figure><blockquote><p>合并分支过程中如果发生冲突则需要自己手动解决冲突，然后再提交。<br>有冲突时，Git会显示哪个文件有冲突，并在冲突的文件中加上特殊的标识符号，解决完冲突后，要手动去掉这些被添加的标识符号。<br>如果冲突比较复杂的话，最好使用其他工具来协助，通过git mergetool来启动。<br>冲突一般是在不同的分支上对同一文件的同一位置内容进行了改动，并已提交到仓库中，这样在合并的时候就会发生冲突。</p></blockquote><h2 id="标签的添加、删除、查看"><a href="#标签的添加、删除、查看" class="headerlink" title="标签的添加、删除、查看"></a>标签的添加、删除、查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git tag#查看标签</span><br><span class="line">git tag 标签名#创建简单的标签</span><br><span class="line">git tag -a 标签名 -m &apos;附加信息&apos;#创建附加信息的标签</span><br><span class="line">git show 标签名#通过标签查看信息</span><br><span class="line">git tag -d 标签名#删除标签</span><br></pre></td></tr></table></figure><blockquote><p>标签可以在需要的地方，为某个提交对象创建别名，这样以后我们就可以通过标签来查看一些信息，创建分支等。</p></blockquote><h2 id="查看工作目录状态"><a href="#查看工作目录状态" class="headerlink" title="查看工作目录状态"></a>查看工作目录状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><blockquote><p>在git命令执行后，要养成通过git status查看git状态的习惯，以便及时了解文件变化的情况。<br>通过git status可以知道文件的状态（已修改未暂存、已删除、已修改并已暂存等待提交、未跟踪）。</p></blockquote><h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git log -p#显示每次提交文件变化</span><br></pre></td></tr></table></figure><blockquote><p>通过git log可以查看当前分支的所有提交历史，知道每次提交的commit对象的ID以及提交时附加的描述信息等。<br>要显示更多的信息，需要使用其支持的选项，如git log -p可以将每次提交的文件变化也显示出来。</p></blockquote><h2 id="查看指定的提交对象"><a href="#查看指定的提交对象" class="headerlink" title="查看指定的提交对象"></a>查看指定的提交对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git show commit_id#查看指定的某次提交内容</span><br><span class="line">git show --all#显示所有的提交历史内容</span><br><span class="line">git shortlog -s -n#显示总的提交次数</span><br></pre></td></tr></table></figure><blockquote><p>通过<code>git log</code>可以显示整个提交历史，而通过<code>git show commit-id</code>则可以查看指定的某次提交内容，<br>当然<code>git show -all</code>也可以显示出提交历史，另外还可以格式化显示内容。</p></blockquote><p><strong>Note : commit-id可以是commit对象对应的ID，也可以是HEAD，分支名，tag等。</strong></p><h2 id="查看工作区、暂存区、仓库之间的差异"><a href="#查看工作区、暂存区、仓库之间的差异" class="headerlink" title="查看工作区、暂存区、仓库之间的差异"></a>查看工作区、暂存区、仓库之间的差异</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git diff#比较工作区与暂存区的差异</span><br><span class="line">git diff HEAD#比较工作区与仓库中最近一次的提交间的差异</span><br><span class="line">git diff --cached#比较暂存区与仓库中最近一次提交的差异</span><br><span class="line">git blame filename#可以列出该文件每次被修改的时间和内容。</span><br></pre></td></tr></table></figure><h2 id="版本回退、撤销操作"><a href="#版本回退、撤销操作" class="headerlink" title="版本回退、撤销操作"></a>版本回退、撤销操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git reflog#显示提交历史的简介</span><br><span class="line">git checkout -- filename#丢弃工作区的修改</span><br><span class="line">git reset --hard HEAD^#回退到上一个版本</span><br><span class="line">git reset --hard commit_id#回退到指定版本</span><br><span class="line">git checkout -- filename#恢复工作区被删除的指定文件（文件之前被提交到仓库中）</span><br><span class="line">git checkout -f #恢复工作区中所有被删除的文件(文件之前被提交到仓库中)</span><br><span class="line">git ls-files -d#列出工作区被删除的文件（文件之前被提交到仓库中）</span><br></pre></td></tr></table></figure><blockquote><p>有时候，由于我们的误操作，产生了一些错误，我们发现后希望能够及时纠正这些因为误操作而产生的结果，<br>将工作目录恢复到某个正常状态。</p></blockquote><ul><li>撤销修改，但还没有添加到暂存区： <code>git checkout -- filename</code>修改的文件会被恢复到上次提交时的状态，修改的内容会丢失。</li><li>版本回退：先通过<code>git reflog</code>找到某个版本的<code>commit_id</code>，然后用<code>git reset --hard commit_id</code>将工作目录的文件恢复到指定的版本。</li><li>恢复工作区中被删除的文件（文件之前被提交到仓库中）：<code>git checkout -- filename 或 git checkout -f</code></li></ul><h2 id="备份工作区"><a href="#备份工作区" class="headerlink" title="备份工作区"></a>备份工作区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git stash#将工作区文件保存在Git内部栈中</span><br><span class="line">git stash list#列出Git内部栈中保存的工作区文件列表</span><br><span class="line">git stash apply stash_id#恢复工作区到指定的内部栈状态</span><br><span class="line">git stash pop#恢复工作区到上一个内部栈状态</span><br><span class="line">git stash clear#清空Git内部栈</span><br></pre></td></tr></table></figure><blockquote><p>如果正在一个develop分支上正在开发新功能，但这时master分支(稳定版本)突然发现了bug，并需要及时修复，<br>而develop分支此时的工作还没有完成，且不希望将之前的工作就这样提交到仓库中时，<br>这时就可以用<code>git stash</code>来暂时保存这些状态到Git内部栈中，并用当前分支上一次的提交内容来恢复工作目录，<br>然后切换到master分支进行bug修复工作，等修复完毕并提交到仓库上后，再使用<code>git stash apply [stash@{0}]</code><br>或者<code>git stash pop</code>将工作目录恢复到之前的状态，继续之前的工作。</p></blockquote><blockquote><p>同时也可以多次使用<code>git stash</code>将未提交的代码压入到Git栈中，但当多次使用<code>git stash</code>命令后，<br>Git栈里将充满了未提交的代码，这时候到底要用哪个版本来恢复工作目录呢？<code>git stash list</code>命令可以将当前的Git栈信息打印出来，<br>我们只需要将找到对应的版本号，例如使用<code>git stash apply stash@{1}</code>就可以用版本号为stash@{1}的内容来恢复工作目录。</p></blockquote><blockquote><p>当Git栈中所有的内容都被恢复后，可以使用<code>git stash clear</code>来将栈清空。</p></blockquote><h2 id="将当前工作区目录文件压缩归档"><a href="#将当前工作区目录文件压缩归档" class="headerlink" title="将当前工作区目录文件压缩归档"></a>将当前工作区目录文件压缩归档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git archive --format=zip -o arch.zip HEAD</span><br><span class="line">git arch --format zip head&gt;arch.zip</span><br></pre></td></tr></table></figure><h1 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h1><blockquote><p>Git相比其他版本控制软件的一个优点就是大多数的操作都可以在本地进行，而不用管远程的仓库，因为操作是在本地，<br>且操作的数据也是在本地，加上指针等原因，所以执行的速度就会比较快。 在多人协作的项目中，就需要涉及与远程仓库交互的问题，<br>主要是如何从远程仓库抓取最新数据合并到自己的本地分支上，将自己的最新成果分享给其他人或让别人审查等 。</p></blockquote><h2 id="远程仓库的克隆、添加、查看"><a href="#远程仓库的克隆、添加、查看" class="headerlink" title="远程仓库的克隆、添加、查看"></a>远程仓库的克隆、添加、查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git remote#显示已添加的远程仓库名</span><br><span class="line">git remote -v #显示已添加的远程仓库名和地址</span><br><span class="line">git remote add 远程仓库名 远程仓库地址#在本地添加远程仓库</span><br><span class="line">git remote rm 远程仓库名#删除本地添加的远程仓库名</span><br><span class="line">git remote rename 原名 新名#重命名远程仓库名</span><br><span class="line">git clone 远程仓库地址 [克隆到指定的文件夹]#克隆远程仓库到本地</span><br><span class="line">git fetch 远程仓库名#从远程仓库抓取最新数据到本地但不与本地分支进行合并 </span><br><span class="line">git pull 远程仓库名本地要合并的分支名#从远程仓库抓取最新数据并自动与本地分支进行合并</span><br><span class="line">git push 远程仓库名 本地分支名#将本地仓库推送到远程仓库中</span><br><span class="line">git remote show 远程仓库名#查看远程仓库信息</span><br><span class="line">git remote show#查看所有远程仓库</span><br><span class="line">git push 远程仓库名 标签名#将标签推送到远程仓库（Git默认不推送标签）</span><br></pre></td></tr></table></figure><h2 id="协同流程"><a href="#协同流程" class="headerlink" title="协同流程"></a>协同流程</h2><ul><li>Fork远程项目</li><li>把Fork的项目clone到本地</li><li>执行以下命令，将别人的库添加为远端库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add 远端仓库名 远端的分支</span><br></pre></td></tr></table></figure><ul><li>运行以下命令，拉去合并到本地</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull 远端仓库名 远端分支名</span><br></pre></td></tr></table></figure><ul><li>编辑内容</li><li>commit之后push到自己的库</li><li>登录Github，在你的首页可以看到一个pull request按钮，点击它，填写一些说明信息，提交即可。</li></ul><blockquote><p>在本地编辑内容前必须执行pull操作同步别人的远端库（这样避免冲突）</p></blockquote><h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><blockquote><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再使用<code>git stash pop</code>，回到工作现场.</p></blockquote><h2 id="多人协作技巧"><a href="#多人协作技巧" class="headerlink" title="多人协作技巧"></a>多人协作技巧</h2><blockquote><p>查看远程库信息，使用<code>git remote -v</code>；<br> 本地新建的分支如果不推送到远程，对其他人就是不可见的；<br> 从本地推送分支，使用<code>git push</code> 远程仓库名 分支名，如果推送失败，先用<code>git pull</code>抓取远程的新提交；<br> 在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；<br> 建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；<br> 从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p></blockquote><h2 id="Git常用命令思维导图"><a href="#Git常用命令思维导图" class="headerlink" title="Git常用命令思维导图"></a>Git常用命令思维导图</h2><p><img src="/images/git/gitdown.jpg" alt="git常用命令速查表"></p>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/images/git/git_logo.jpg&quot; class=&quot;full-image&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
    
    </summary>
    
      <category term="团队协作" scheme="http://shuxiaohao.github.io/categories/%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C/"/>
    
    
      <category term="Git" scheme="http://shuxiaohao.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
