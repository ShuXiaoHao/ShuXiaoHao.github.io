<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haroy</title>
  
  <subtitle>舒豪的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shuxiaohao.github.io/"/>
  <updated>2018-09-22T13:00:33.728Z</updated>
  <id>http://shuxiaohao.github.io/</id>
  
  <author>
    <name>Shu Hao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux网络IO模型简介</title>
    <link href="http://shuxiaohao.github.io/2018/09/22/Linux%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/"/>
    <id>http://shuxiaohao.github.io/2018/09/22/Linux网络IO模型简介/</id>
    <published>2018-09-22T10:34:47.000Z</published>
    <updated>2018-09-22T13:00:33.728Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note success"><p>Linux 的内核将所有外部设备都看做一个文件来操作（一切皆文件），对一个文件的读写操作会调用内核提供的系统命令，返回一个<code>file descriptor</code>（fd，文件描述符）。而对一个socket的读写也会有响应的描述符，称为<code>socket fd</code>（socket文件描述符），描述符就是一个数字，指向内核中的一个结构体（文件路径，数据区等一些属性）。<br>    根据UNIX网络编程对I/O模型的分类，UNIX提供了5种I/O模型。</p></div><a id="more"></a><h1 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h1><h2 id="阻塞I-O模型"><a href="#阻塞I-O模型" class="headerlink" title="阻塞I/O模型"></a>阻塞I/O模型</h2><blockquote><p>最常用的I/O模型，默认情况下，所有文件操作都是阻塞的。<br> 比如I/O模型下的套接字接口：在进程空间中调用<code>recvfrom</code>，其系统调用直到数据包到达且被复制到应用进程的缓冲区中或者发生错误时才返回，在此期间一直等待。<br> 进程在调用<code>recvfrom</code>开始到它返回的整段时间内都是被阻塞的，所以叫阻塞I/O模型。</p></blockquote><p> <strong>图示：</strong><br><img src="/images/linux/linux1.png" alt=""></p><h2 id="非阻塞I-O模型"><a href="#非阻塞I-O模型" class="headerlink" title="非阻塞I/O模型"></a>非阻塞I/O模型</h2><blockquote><p><code>recvfrom</code>从应用层到内核的时候，就直接返回一个<code>EWOULDBLOCK</code>错误，一般都对非阻塞I/O模型进行轮询检查这个状态，看内核是不是有数据到来。</p></blockquote><p><strong>图示：</strong><br><img src="/images/linux/linux2.png" alt=""> </p><h2 id="I-O复用模型"><a href="#I-O复用模型" class="headerlink" title="I/O复用模型"></a>I/O复用模型</h2><blockquote><p>Linux提供<code>select/poll</code>，进程通过将一个或多个fd传递给<code>select</code>或<code>poll</code>系统调用，阻塞在<code>select</code>操作上，这样，<code>select/poll</code>可以帮我们侦测多个fd是否处于就绪状态。<br>  <code>select/poll</code>是顺序扫描fd是否就绪，而且支持的fd数量有限，因此它的使用受到了一些制约。<br>  Linux还提供一个<code>epoll</code>系统调用，<code>epoll</code>使用基于事件驱动方式代替顺序扫描，因此性能更高。当有fd就绪时，立即回调函数<code>rollback</code>。</p></blockquote><p><strong>图示：</strong><br><img src="/images/linux/linux3.png" alt=""> </p><h2 id="信号驱动I-O模型"><a href="#信号驱动I-O模型" class="headerlink" title="信号驱动I/O模型"></a>信号驱动I/O模型</h2><blockquote><p>首先开启套接口信号驱动I/O功能，并通过系统调用<code>sigaction</code>执行一个信号处理函数（此系统调用立即返回，进程继续工作，非阻塞）。当数据准备就绪时，就为改进程生成一个<code>SIGIO</code>信号，通过信号回调通知应用程序调用<code>recvfrom</code>来读取数据，并通知主循环函数处理树立。</p></blockquote><p><strong>图示：</strong><br><img src="/images/linux/linux4.png" alt=""> </p><h2 id="异步I-O"><a href="#异步I-O" class="headerlink" title="异步I/O"></a>异步I/O</h2><blockquote><p>告知内核启动某个操作，并让内核在整个操作完成后（包括数据的复制）通知进程。<br> 信号驱动I/O模型通知的是何时可以开始一个I/O操作，异步I/O模型有内核通知I/O操作何时已经完成。</p></blockquote><p> <strong>图示：</strong><br> <img src="/images/linux/linux5.png" alt=""> </p><h1 id="I-O多路复用技术"><a href="#I-O多路复用技术" class="headerlink" title="I/O多路复用技术"></a>I/O多路复用技术</h1><blockquote><p>I/O编程中，需要处理多个客户端接入请求时，可以利用多线程或者I/O多路复用技术进行处理。<br>  正如前面的简介，I/O多路复用技术通过把多个I/O的阻塞复用到同一个<code>select</code>的阻塞上，从而使得系统在单线程的情况下可以同时处理多个客户端请求。<br>   与传统的多线程模型相比，I/O多路复用的最大优势就是系统开销小，系统不需要创建新的额外线程，也不需要维护这些线程的运行，降低了系统的维护工作量，节省了系统资源。<br>   主要的应用场景：</p><pre><code>1. 服务器需要同时处理多个处于监听状态或多个连接状态的套接字。2. 服务器需要同时处理多种网络协议的套接字。3. 支持I/O多路复用的系统调用主要有`select、pselect、poll、epoll`。4. 而当前推荐使用的是`epoll`，优势如下：5. 支持一个进程打开的`socket` fd不受限制。6. I/O效率不会随着fd数目的增加而线性下将。7. 使用`mmap`加速内核与用户空间的消息传递。8. epoll拥有更加简单的API。</code></pre></blockquote><hr><p>  本文来自 anxpp 的CSDN 博客 ，全文地址请点击：<a href="https://blog.csdn.net/anxpp/article/details/51503329?utm_source=copy" target="_blank" rel="noopener">https://blog.csdn.net/anxpp/article/details/51503329?utm_source=copy</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note success&quot;&gt;&lt;p&gt;Linux 的内核将所有外部设备都看做一个文件来操作（一切皆文件），对一个文件的读写操作会调用内核提供的系统命令，返回一个&lt;code&gt;file descriptor&lt;/code&gt;（fd，文件描述符）。而对一个socket的读写也会有响应的描述符，称为&lt;code&gt;socket fd&lt;/code&gt;（socket文件描述符），描述符就是一个数字，指向内核中的一个结构体（文件路径，数据区等一些属性）。&lt;br&gt;    根据UNIX网络编程对I/O模型的分类，UNIX提供了5种I/O模型。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://shuxiaohao.github.io/categories/Linux/"/>
    
    
      <category term="IO" scheme="http://shuxiaohao.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>《Netty学习总结一》NIO</title>
    <link href="http://shuxiaohao.github.io/2018/09/22/%E3%80%8ANetty%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%80%E3%80%8BNIO/"/>
    <id>http://shuxiaohao.github.io/2018/09/22/《Netty学习总结一》NIO/</id>
    <published>2018-09-22T10:20:18.000Z</published>
    <updated>2018-09-22T13:50:08.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info"><p>本文是通过学习<code>Netty</code>后对<code>NIO</code>的一些个人总结，从传统的BIO到NIO再到AIO自浅至深介绍，并附上完整的代码讲解。<br>下面代码中会使用这样一个例子：客户端发送一段算式的字符串到服务器，服务器计算后返回结果到客户端。<br>代码的所有说明，都直接作为注释，嵌入到代码中，看代码时就能更容易理解，代码中会用到一个计算结果的工具类，见文章代码部分。<br>相关的基础知识文章推荐：<br>    <em><a href="http://shuxiaohao.github.io/2018/09/22/Linux网络IO模型简介/">Linux 网络 I/O 模型简介（图文</a></em></p></div><a id="more"></a><h1 id="事件分离器"><a href="#事件分离器" class="headerlink" title="事件分离器"></a>事件分离器</h1><blockquote><p>在IO读写时，把 IO请求 与 读写操作 分离调配进行，需要用到事件分离器。根据处理机制的不同，事件分离器又分为：同步的Reactor和异步的Proactor。</p></blockquote><p><strong>Reactor模型：</strong></p><ul><li>应用程序在事件分离器注册 读就绪事件 和 读就绪事件处理器</li><li>事件分离器等待读就绪事件发生</li><li>读就绪事件发生，激活事件分离器，分离器调用 读就绪事件处理器（即：可以进行读操作了，开始读）</li><li>读事件处理器开始进行读操作，把读到的数据提供给程序使用</li></ul><p><strong>Proactor模型：</strong></p><ul><li>应用程序在事件分离器注册 读完成事件 和 读完成事件处理器，并向操作系统发出异步读请求</li><li>事件分离器等待操作系统完成读取</li><li>在分离器等待过程中，操作系统利用并行的内核线程执行实际的读操作，并将结果数据存入用户自定义缓冲区，最后通知事件分离器读操作完成</li><li>事件分离器监听到 读完成事件 后，激活 读完成事件的处理器</li><li>读完成事件处理器 处理用户自定义缓冲区中的数据给应用程序使用</li></ul><blockquote><p>同步和异步的区别就在于 读 操作由谁完成：同步的Reactor是指程序发出读请求后，由分离器监听到可以进行读操作时（需要获得读操作条件）通知事件处理器进行读操作，异步的Proactor是指程序发出读请求后，操作系统立刻异步地进行读操作了，读完之后在通知分离器，分离器激活处理器直接取用已读到的数据。</p></blockquote><h1 id="BIO编程"><a href="#BIO编程" class="headerlink" title="BIO编程"></a>BIO编程</h1><h2 id="传统的BIO编程"><a href="#传统的BIO编程" class="headerlink" title="传统的BIO编程"></a>传统的BIO编程</h2><blockquote><p>网络编程的基本模型是C/S模型，即两个进程间的通信。</p></blockquote><blockquote><p>服务端提供IP和监听端口，客户端通过连接操作想服务端监听的地址发起连接请求，通过三次握手连接，如果连接成功建立，双方就可以通过套接字进行通信。</p></blockquote><blockquote><p>传统的同步阻塞模型开发中，ServerSocket负责绑定IP地址，启动监听端口；Socket负责发起连接操作。连接成功后，双方通过输入和输出流进行同步阻塞式通信。 </p></blockquote><blockquote><p>简单的描述一下BIO的服务端通信模型：采用BIO通信模型的服务端，通常由一个独立的Acceptor线程负责监听客户端的连接，它接收到客户端连接请求之后为每个客户端创建一个新的线程进行链路处理没处理完成后，通过输出流返回应答给客户端，线程销毁。即典型的一请求一应答通宵模型。</p></blockquote><p><strong>传统BIO通信模型图：</strong></p><p><img src="/images/netty/nio1.png" alt=""></p><blockquote><p>该模型最大的问题就是缺乏弹性伸缩能力，当客户端并发访问量增加后，服务端的线程个数和客户端并发访问数呈1:1的正比关系，Java中的线程也是比较宝贵的系统资源，线程数量快速膨胀后，系统的性能将急剧下降，随着访问量的继续增大，系统最终就<code>死-掉-了</code>。</p></blockquote><p><strong>同步阻塞式I/O创建的Server源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anxpp.io.calculator.bio;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;  </span><br><span class="line"><span class="keyword">import</span> java.net.Socket;  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * BIO服务端源码 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerNormal</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//默认的端口号  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_PORT = <span class="number">12345</span>;  </span><br><span class="line">    <span class="comment">//单例的ServerSocket  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ServerSocket server;  </span><br><span class="line">    <span class="comment">//根据传入参数设置监听端口，如果没有参数调用以下方法并使用默认值  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;  </span><br><span class="line">        <span class="comment">//使用默认值  </span></span><br><span class="line">        start(DEFAULT_PORT);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//这个方法不会被大量并发访问，不太需要考虑效率，直接进行方法同步就行了  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(server != <span class="keyword">null</span>) <span class="keyword">return</span>;  </span><br><span class="line">        <span class="keyword">try</span>&#123;  </span><br><span class="line">            <span class="comment">//通过构造函数创建ServerSocket  </span></span><br><span class="line">            <span class="comment">//如果端口合法且空闲，服务端就监听成功  </span></span><br><span class="line">            server = <span class="keyword">new</span> ServerSocket(port);  </span><br><span class="line">            System.out.println(<span class="string">"服务器已启动，端口号："</span> + port);  </span><br><span class="line">            <span class="comment">//通过无线循环监听客户端连接  </span></span><br><span class="line">            <span class="comment">//如果没有客户端接入，将阻塞在accept操作上。  </span></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">                Socket socket = server.accept();  </span><br><span class="line">                <span class="comment">//当有新的客户端接入时，会执行下面的代码  </span></span><br><span class="line">                <span class="comment">//然后创建一个新的线程处理这条Socket链路  </span></span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> ServerHandler(socket)).start();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;  </span><br><span class="line">            <span class="comment">//一些必要的清理工作  </span></span><br><span class="line">            <span class="keyword">if</span>(server != <span class="keyword">null</span>)&#123;  </span><br><span class="line">                System.out.println(<span class="string">"服务器已关闭。"</span>);  </span><br><span class="line">                server.close();  </span><br><span class="line">                server = <span class="keyword">null</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端消息处理线程ServerHandler源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anxpp.io.calculator.bio;  </span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;  </span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;  </span><br><span class="line"><span class="keyword">import</span> java.net.Socket;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.anxpp.io.utils.Calculator;  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 客户端线程 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangtao__anxpp.com </span></span><br><span class="line"><span class="comment"> * 用于处理一个客户端的Socket链路 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> Socket socket;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerHandler</span><span class="params">(Socket socket)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.socket = socket;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;  </span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">try</span>&#123;  </span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));  </span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(),<span class="keyword">true</span>);  </span><br><span class="line">            String expression;  </span><br><span class="line">            String result;  </span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">                <span class="comment">//通过BufferedReader读取一行  </span></span><br><span class="line">                <span class="comment">//如果已经读到输入流尾部，返回null,退出循环  </span></span><br><span class="line">                <span class="comment">//如果得到非空值，就尝试计算结果并返回  </span></span><br><span class="line">                <span class="keyword">if</span>((expression = in.readLine())==<span class="keyword">null</span>) <span class="keyword">break</span>;  </span><br><span class="line">                System.out.println(<span class="string">"服务器收到消息："</span> + expression);  </span><br><span class="line">                <span class="keyword">try</span>&#123;  </span><br><span class="line">                    result = Calculator.cal(expression).toString();  </span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;  </span><br><span class="line">                    result = <span class="string">"计算错误："</span> + e.getMessage();  </span><br><span class="line">                &#125;  </span><br><span class="line">                out.println(result);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;  </span><br><span class="line">            <span class="comment">//一些必要的清理工作  </span></span><br><span class="line">            <span class="keyword">if</span>(in != <span class="keyword">null</span>)&#123;  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    in.close();  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">                in = <span class="keyword">null</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span>(out != <span class="keyword">null</span>)&#123;  </span><br><span class="line">                out.close();  </span><br><span class="line">                out = <span class="keyword">null</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    socket.close();  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">                socket = <span class="keyword">null</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>同步阻塞式I/O创建的Client源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anxpp.io.calculator.bio;  </span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;  </span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;  </span><br><span class="line"><span class="keyword">import</span> java.net.Socket;  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 阻塞式I/O创建的客户端 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangtao__anxpp.com </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//默认的端口号  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_SERVER_PORT = <span class="number">12345</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String DEFAULT_SERVER_IP = <span class="string">"127.0.0.1"</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String expression)</span></span>&#123;  </span><br><span class="line">        send(DEFAULT_SERVER_PORT,expression);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> port,String expression)</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"算术表达式为："</span> + expression);  </span><br><span class="line">        Socket socket = <span class="keyword">null</span>;  </span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;  </span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">try</span>&#123;  </span><br><span class="line">            socket = <span class="keyword">new</span> Socket(DEFAULT_SERVER_IP,port);  </span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));  </span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(),<span class="keyword">true</span>);  </span><br><span class="line">            out.println(expression);  </span><br><span class="line">            System.out.println(<span class="string">"___结果为："</span> + in.readLine());  </span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;  </span><br><span class="line">            <span class="comment">//一下必要的清理工作  </span></span><br><span class="line">            <span class="keyword">if</span>(in != <span class="keyword">null</span>)&#123;  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    in.close();  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">                in = <span class="keyword">null</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span>(out != <span class="keyword">null</span>)&#123;  </span><br><span class="line">                out.close();  </span><br><span class="line">                out = <span class="keyword">null</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    socket.close();  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">                socket = <span class="keyword">null</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试代码，为了方便在控制台看输出结果，放到同一个程序（jvm）中运行：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anxpp.io.calculator.bio;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.util.Random;  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 测试方法 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangtao__anxpp.com </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//测试主方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;  </span><br><span class="line">        <span class="comment">//运行服务器  </span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    ServerBetter.start();  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;).start();  </span><br><span class="line">        <span class="comment">//避免客户端先于服务器启动前执行代码  </span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);  </span><br><span class="line">        <span class="comment">//运行客户端   </span></span><br><span class="line">        <span class="keyword">char</span> operators[] = &#123;<span class="string">'+'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'/'</span>&#125;;  </span><br><span class="line">        Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());  </span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"static-access"</span>)  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">                    <span class="comment">//随机产生算术表达式  </span></span><br><span class="line">                    String expression = random.nextInt(<span class="number">10</span>)+<span class="string">""</span>+operators[random.nextInt(<span class="number">4</span>)]+(random.nextInt(<span class="number">10</span>)+<span class="number">1</span>);  </span><br><span class="line">                    Client.send(expression);  </span><br><span class="line">                    <span class="keyword">try</span> &#123;  </span><br><span class="line">                        Thread.currentThread().sleep(random.nextInt(<span class="number">1000</span>));  </span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">                        e.printStackTrace();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;).start();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>其中一次的运行结果：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">服务器已启动，端口号：12345</span><br><span class="line">算术表达式为：4-2</span><br><span class="line">服务器收到消息：4-2</span><br><span class="line">___结果为：2</span><br><span class="line">算术表达式为：5-10</span><br><span class="line">服务器收到消息：5-10</span><br><span class="line">___结果为：-5</span><br><span class="line">算术表达式为：0-9</span><br><span class="line">服务器收到消息：0-9</span><br><span class="line">___结果为：-9</span><br><span class="line">算术表达式为：0+6</span><br><span class="line">服务器收到消息：0+6</span><br><span class="line">___结果为：6</span><br><span class="line">算术表达式为：1/6</span><br><span class="line">服务器收到消息：1/6</span><br><span class="line">___结果为：0.16666666666666666</span><br></pre></td></tr></table></figure></p><blockquote><p>从以上代码，很容易看出，BIO主要的问题在于每当有一个新的客户端请求接入时，服务端必须创建一个新的线程来处理这条链路，在需要满足高性能、高并发的场景是没法应用的（大量创建新的线程会严重影响服务器性能，甚至罢工）。</p></blockquote><h2 id="伪异步I-O编程"><a href="#伪异步I-O编程" class="headerlink" title="伪异步I/O编程"></a>伪异步I/O编程</h2><blockquote><p>为了改进这种一连接一线程的模型，我们可以使用线程池来管理这些线程（需要了解更多请参考前面提供的文章），实现1个或多个线程处理N个客户端的模型（但是底层还是使用的同步阻塞I/O），通常被称为“伪异步I/O模型“。</p></blockquote><p> <strong>伪异步I/O模型图：</strong><br> <img src="/images/netty/nio2.png" alt=""></p><p> <strong>实现很简单，我们只需要将新建线程的地方，交给线程池管理即可，只需要改动刚刚的Server代码即可:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anxpp.io.calculator.bio;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;  </span><br><span class="line"><span class="keyword">import</span> java.net.Socket;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * BIO服务端源码__伪异步I/O </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangtao__anxpp.com </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerBetter</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//默认的端口号  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_PORT = <span class="number">12345</span>;  </span><br><span class="line">    <span class="comment">//单例的ServerSocket  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ServerSocket server;  </span><br><span class="line">    <span class="comment">//线程池 懒汉式的单例  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">60</span>);  </span><br><span class="line">    <span class="comment">//根据传入参数设置监听端口，如果没有参数调用以下方法并使用默认值  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;  </span><br><span class="line">        <span class="comment">//使用默认值  </span></span><br><span class="line">        start(DEFAULT_PORT);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//这个方法不会被大量并发访问，不太需要考虑效率，直接进行方法同步就行了  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(server != <span class="keyword">null</span>) <span class="keyword">return</span>;  </span><br><span class="line">        <span class="keyword">try</span>&#123;  </span><br><span class="line">            <span class="comment">//通过构造函数创建ServerSocket  </span></span><br><span class="line">            <span class="comment">//如果端口合法且空闲，服务端就监听成功  </span></span><br><span class="line">            server = <span class="keyword">new</span> ServerSocket(port);  </span><br><span class="line">            System.out.println(<span class="string">"服务器已启动，端口号："</span> + port);  </span><br><span class="line">            <span class="comment">//通过无线循环监听客户端连接  </span></span><br><span class="line">            <span class="comment">//如果没有客户端接入，将阻塞在accept操作上。  </span></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">                Socket socket = server.accept();  </span><br><span class="line">                <span class="comment">//当有新的客户端接入时，会执行下面的代码  </span></span><br><span class="line">                <span class="comment">//然后创建一个新的线程处理这条Socket链路  </span></span><br><span class="line">                executorService.execute(<span class="keyword">new</span> ServerHandler(socket));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;  </span><br><span class="line">            <span class="comment">//一些必要的清理工作  </span></span><br><span class="line">            <span class="keyword">if</span>(server != <span class="keyword">null</span>)&#123;  </span><br><span class="line">                System.out.println(<span class="string">"服务器已关闭。"</span>);  </span><br><span class="line">                server.close();  </span><br><span class="line">                server = <span class="keyword">null</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>测试运行结果是一样的。<br>我们知道，如果使用CachedThreadPool线程池（不限制线程数量，如果不清楚请参考文首提供的文章），其实除了能自动帮我们管理线程（复用），看起来也就像是1:1的客户端：线程数模型，而使用FixedThreadPool我们就有效的控制了线程的最大数量，保证了系统有限的资源的控制，实现了N:M的伪异步I/O模型。<br>但是，正因为限制了线程数量，如果发生大量并发请求，超过最大数量的线程就只能等待，直到线程池中的有空闲的线程可以被复用。而对Socket的输入流就行读取时，会一直阻塞，直到发生：</p><ul><li>有数据可读</li><li>可用数据以及读取完毕</li><li>发生空指针或I/O异常<br>所以在读取数据较慢时（比如数据量大、网络传输慢等），大量并发的情况下，其他接入的消息，只能一直等待，这就是最大的弊端。<br>而后面即将介绍的NIO，就能解决这个难题。</li></ul></blockquote><p>#NIO编程</p><blockquote><p>JDK 1.4中的java.nio.*包中引入新的Java I/O库，其目的是提高速度。实际上，“旧”的I/O包已经使用NIO重新实现过，即使我们不显式的使用NIO编程，也能从中受益。速度的提高在文件I/O和网络I/O中都可能会发生，但本文只讨论后者。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>NIO我们一般认为是New I/O（也是官方的叫法），因为它是相对于老的I/O类库新增的（其实在JDK 1.4中就已经被引入了，但这个名词还会继续用很久，即使它们在现在看来已经是“旧”的了，所以也提示我们在命名时，需要好好考虑），做了很大的改变。但民间跟多人称之为Non-block I/O，即非阻塞I/O，因为这样叫，更能体现它的特点。而下文中的NIO，不是指整个新的I/O库，而是非阻塞I/O。</p></blockquote><blockquote><p>NIO提供了与传统BIO模型中的Socket和ServerSocket相对应的SocketChannel和ServerSocketChannel两种不同的套接字通道实现。</p></blockquote><blockquote><p>新增的着两种通道都支持阻塞和非阻塞两种模式。</p></blockquote><blockquote><p>阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。</p></blockquote><blockquote><p>对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用NIO的非阻塞模式来开发。</p></blockquote><blockquote><p>下面会先对基础知识进行介绍。</p></blockquote><h2 id="缓冲区Buffer"><a href="#缓冲区Buffer" class="headerlink" title="缓冲区Buffer"></a>缓冲区Buffer</h2><p><img src="/images/netty/nio3.png" alt=""></p><blockquote><p>Buffer是一个对象，包含一些要写入或者读出的数据。</p></blockquote><blockquote><p>在NIO库中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的；在写入数据时，也是写入到缓冲区中。任何时候访问NIO中的数据，都是通过缓冲区进行操作。</p></blockquote><blockquote><p>缓冲区实际上是一个数组，并提供了对数据结构化访问以及维护读写位置等信息。</p></blockquote><blockquote><p>具体的缓存区有这些：ByteBuffe、CharBuffer、 ShortBuffer、IntBuffer、LongBuffer、FloatBuffer、DoubleBuffer。他们实现了相同的接口：Buffer。</p></blockquote><h2 id="通道Channel"><a href="#通道Channel" class="headerlink" title="通道Channel"></a>通道Channel</h2><p><img src="/images/netty/nio4.png" alt=""></p><blockquote><p>我们对数据的读取和写入要通过Channel，它就像水管一样，是一个通道。通道不同于流的地方就是通道是双向的，可以用于读、写和同时读写操作。</p></blockquote><blockquote><p>底层的操作系统的通道一般都是全双工的，所以全双工的Channel比流能更好的映射底层操作系统的API。</p></blockquote><blockquote><p>Channel主要分两大类：</p><ul><li>SelectableChannel：用户网络读写</li><li>FileChannel：用于文件操作</li></ul></blockquote><blockquote><p>后面代码会涉及的ServerSocketChannel和SocketChannel都是SelectableChannel的子类。</p></blockquote><h2 id="多路复用器-Selector"><a href="#多路复用器-Selector" class="headerlink" title="多路复用器 Selector"></a>多路复用器 Selector</h2><blockquote><p>Selector是Java  NIO 编程的基础。</p></blockquote><blockquote><p>Selector提供选择已经就绪的任务的能力：Selector会不断轮询注册在其上的Channel，如果某个Channel上面发生读或者写事件，这个Channel就处于就绪状态，会被Selector轮询出来，然后通过SelectionKey可以获取就绪Channel的集合，进行后续的I/O操作。</p></blockquote><blockquote><p>一个Selector可以同时轮询多个Channel，因为JDK使用了epoll()代替传统的select实现，所以没有最大连接句柄1024/2048的限制。所以，只需要一个线程负责Selector的轮询，就可以接入成千上万的客户端。</p></blockquote><h2 id="NIO服务端"><a href="#NIO服务端" class="headerlink" title="NIO服务端"></a>NIO服务端</h2><blockquote><p>代码比传统的Socket编程看起来要复杂不少。<br> 直接贴代码吧，以注释的形式给出代码说明。</p></blockquote><p> <strong>NIO创建的Server源码：</strong><br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anxpp.io.calculator.nio;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_PORT = <span class="number">12345</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ServerHandle serverHandle;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        start(DEFAULT_PORT);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(serverHandle!=<span class="keyword">null</span>)  </span><br><span class="line">            serverHandle.stop();  </span><br><span class="line">        serverHandle = <span class="keyword">new</span> ServerHandle(port);  </span><br><span class="line">        <span class="keyword">new</span> Thread(serverHandle,<span class="string">"Server"</span>).start();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </span><br><span class="line">        start();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>ServerHandle：</strong><br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anxpp.io.calculator.nio;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;  </span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;  </span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;  </span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;  </span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;  </span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;  </span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;  </span><br><span class="line"><span class="keyword">import</span> java.util.Set;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.anxpp.io.utils.Calculator;  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * NIO服务端 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangtao__anxpp.com </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandle</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> Selector selector;  </span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel serverChannel;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> started;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 构造方法 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port 指定要监听的端口号 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerHandle</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span>&#123;  </span><br><span class="line">            <span class="comment">//创建选择器  </span></span><br><span class="line">            selector = Selector.open();  </span><br><span class="line">            <span class="comment">//打开监听通道  </span></span><br><span class="line">            serverChannel = ServerSocketChannel.open();  </span><br><span class="line">            <span class="comment">//如果为 true，则此通道将被置于阻塞模式；如果为 false，则此通道将被置于非阻塞模式  </span></span><br><span class="line">            serverChannel.configureBlocking(<span class="keyword">false</span>);<span class="comment">//开启非阻塞模式  </span></span><br><span class="line">            <span class="comment">//绑定端口 backlog设为1024  </span></span><br><span class="line">            serverChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(port),<span class="number">1024</span>);  </span><br><span class="line">            <span class="comment">//监听客户端连接请求  </span></span><br><span class="line">            serverChannel.register(selector, SelectionKey.OP_ACCEPT);  </span><br><span class="line">            <span class="comment">//标记服务器已开启  </span></span><br><span class="line">            started = <span class="keyword">true</span>;  </span><br><span class="line">            System.out.println(<span class="string">"服务器已启动，端口号："</span> + port);  </span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            System.exit(<span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        started = <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="comment">//循环遍历selector  </span></span><br><span class="line">        <span class="keyword">while</span>(started)&#123;  </span><br><span class="line">            <span class="keyword">try</span>&#123;  </span><br><span class="line">                <span class="comment">//无论是否有读写事件发生，selector每隔1s被唤醒一次  </span></span><br><span class="line">                selector.select(<span class="number">1000</span>);  </span><br><span class="line">                <span class="comment">//阻塞,只有当至少一个注册的事件发生的时候才会继续.  </span></span><br><span class="line"><span class="comment">//              selector.select();  </span></span><br><span class="line">                Set&lt;SelectionKey&gt; keys = selector.selectedKeys();  </span><br><span class="line">                Iterator&lt;SelectionKey&gt; it = keys.iterator();  </span><br><span class="line">                SelectionKey key = <span class="keyword">null</span>;  </span><br><span class="line">                <span class="keyword">while</span>(it.hasNext())&#123;  </span><br><span class="line">                    key = it.next();  </span><br><span class="line">                    it.remove();  </span><br><span class="line">                    <span class="keyword">try</span>&#123;  </span><br><span class="line">                        handleInput(key);  </span><br><span class="line">                    &#125;<span class="keyword">catch</span>(Exception e)&#123;  </span><br><span class="line">                        <span class="keyword">if</span>(key != <span class="keyword">null</span>)&#123;  </span><br><span class="line">                            key.cancel();  </span><br><span class="line">                            <span class="keyword">if</span>(key.channel() != <span class="keyword">null</span>)&#123;  </span><br><span class="line">                                key.channel().close();  </span><br><span class="line">                            &#125;  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;<span class="keyword">catch</span>(Throwable t)&#123;  </span><br><span class="line">                t.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//selector关闭后会自动释放里面管理的资源  </span></span><br><span class="line">        <span class="keyword">if</span>(selector != <span class="keyword">null</span>)  </span><br><span class="line">            <span class="keyword">try</span>&#123;  </span><br><span class="line">                selector.close();  </span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleInput</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(key.isValid())&#123;  </span><br><span class="line">            <span class="comment">//处理新接入的请求消息  </span></span><br><span class="line">            <span class="keyword">if</span>(key.isAcceptable())&#123;  </span><br><span class="line">                ServerSocketChannel ssc = (ServerSocketChannel) key.channel();  </span><br><span class="line">                <span class="comment">//通过ServerSocketChannel的accept创建SocketChannel实例  </span></span><br><span class="line">                <span class="comment">//完成该操作意味着完成TCP三次握手，TCP物理链路正式建立  </span></span><br><span class="line">                SocketChannel sc = ssc.accept();  </span><br><span class="line">                <span class="comment">//设置为非阻塞的  </span></span><br><span class="line">                sc.configureBlocking(<span class="keyword">false</span>);  </span><br><span class="line">                <span class="comment">//注册为读  </span></span><br><span class="line">                sc.register(selector, SelectionKey.OP_READ);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">//读消息  </span></span><br><span class="line">            <span class="keyword">if</span>(key.isReadable())&#123;  </span><br><span class="line">                SocketChannel sc = (SocketChannel) key.channel();  </span><br><span class="line">                <span class="comment">//创建ByteBuffer，并开辟一个1M的缓冲区  </span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);  </span><br><span class="line">                <span class="comment">//读取请求码流，返回读取到的字节数  </span></span><br><span class="line">                <span class="keyword">int</span> readBytes = sc.read(buffer);  </span><br><span class="line">                <span class="comment">//读取到字节，对字节进行编解码  </span></span><br><span class="line">                <span class="keyword">if</span>(readBytes&gt;<span class="number">0</span>)&#123;  </span><br><span class="line">                    <span class="comment">//将缓冲区当前的limit设置为position=0，用于后续对缓冲区的读取操作  </span></span><br><span class="line">                    buffer.flip();  </span><br><span class="line">                    <span class="comment">//根据缓冲区可读字节数创建字节数组  </span></span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[buffer.remaining()];  </span><br><span class="line">                    <span class="comment">//将缓冲区可读字节数组复制到新建的数组中  </span></span><br><span class="line">                    buffer.get(bytes);  </span><br><span class="line">                    String expression = <span class="keyword">new</span> String(bytes,<span class="string">"UTF-8"</span>);  </span><br><span class="line">                    System.out.println(<span class="string">"服务器收到消息："</span> + expression);  </span><br><span class="line">                    <span class="comment">//处理数据  </span></span><br><span class="line">                    String result = <span class="keyword">null</span>;  </span><br><span class="line">                    <span class="keyword">try</span>&#123;  </span><br><span class="line">                        result = Calculator.cal(expression).toString();  </span><br><span class="line">                    &#125;<span class="keyword">catch</span>(Exception e)&#123;  </span><br><span class="line">                        result = <span class="string">"计算错误："</span> + e.getMessage();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="comment">//发送应答消息  </span></span><br><span class="line">                    doWrite(sc,result);  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="comment">//没有读取到字节 忽略  </span></span><br><span class="line"><span class="comment">//              else if(readBytes==0);  </span></span><br><span class="line">                <span class="comment">//链路已经关闭，释放资源  </span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(readBytes&lt;<span class="number">0</span>)&#123;  </span><br><span class="line">                    key.cancel();  </span><br><span class="line">                    sc.close();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//异步发送应答消息  </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doWrite</span><span class="params">(SocketChannel channel,String response)</span> <span class="keyword">throws</span> IOException</span>&#123;  </span><br><span class="line">        <span class="comment">//将消息编码为字节数组  </span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = response.getBytes();  </span><br><span class="line">        <span class="comment">//根据数组容量创建ByteBuffer  </span></span><br><span class="line">        ByteBuffer writeBuffer = ByteBuffer.allocate(bytes.length);  </span><br><span class="line">        <span class="comment">//将字节数组复制到缓冲区  </span></span><br><span class="line">        writeBuffer.put(bytes);  </span><br><span class="line">        <span class="comment">//flip操作  </span></span><br><span class="line">        writeBuffer.flip();  </span><br><span class="line">        <span class="comment">//发送缓冲区的字节数组  </span></span><br><span class="line">        channel.write(writeBuffer);  </span><br><span class="line">        <span class="comment">//****此处不含处理“写半包”的代码  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>可以看到，创建NIO服务端的主要步骤如下：</p><ol><li>打开ServerSocketChannel，监听客户端连接</li><li>绑定监听端口，设置连接为非阻塞模式</li><li>创建Reactor线程，创建多路复用器并启动线程</li><li>将ServerSocketChannel注册到Reactor线程中的Selector上，监听ACCEPT事件</li><li>Selector轮询准备就绪的key</li><li>Selector监听到新的客户端接入，处理新的接入请求，完成TCP三次握手，简历物理链路</li><li>设置客户端链路为非阻塞模式</li><li>将新接入的客户端连接注册到Reactor线程的Selector上，监听读操作，读取客户端发送的网络消息</li><li>异步读取客户端消息到缓冲区</li><li>对Buffer编解码，处理半包消息，将解码成功的消息封装成Task<br>因为应答消息的发送，SocketChannel也是异步非阻塞的，所以不能保证一次能吧需要发送的数据发送完，此时就会出现写半包的问题。我们需要注册写操作，不断轮询Selector将没有发送完的消息发送完毕，然后通过Buffer的hasRemain()方法判断消息是否发送完成。</li></ol></blockquote><h2 id="NIO客户端"><a href="#NIO客户端" class="headerlink" title="NIO客户端"></a>NIO客户端</h2><blockquote><p>还是直接上代码吧，过程也不需要太多解释了，跟服务端代码有点类似。</p></blockquote><p> <strong>Client：</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;本文是通过学习&lt;code&gt;Netty&lt;/code&gt;后对&lt;code&gt;NIO&lt;/code&gt;的一些个人总结，从传统的BIO到NIO再到AIO自浅至深介绍，并附上完整的代码讲解。&lt;br&gt;下面代码中会使用这样一个例子：客户端发送一段算式的字符串到服务器，服务器计算后返回结果到客户端。&lt;br&gt;代码的所有说明，都直接作为注释，嵌入到代码中，看代码时就能更容易理解，代码中会用到一个计算结果的工具类，见文章代码部分。&lt;br&gt;相关的基础知识文章推荐：&lt;br&gt;    &lt;em&gt;&lt;a href=&quot;http://shuxiaohao.github.io/2018/09/22/Linux网络IO模型简介/&quot;&gt;Linux 网络 I/O 模型简介（图文&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Netty" scheme="http://shuxiaohao.github.io/categories/Netty/"/>
    
    
      <category term="NIO" scheme="http://shuxiaohao.github.io/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>Nginx网站架构总结</title>
    <link href="http://shuxiaohao.github.io/2018/09/08/Nginx%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%80%BB%E7%BB%93/"/>
    <id>http://shuxiaohao.github.io/2018/09/08/Nginx网站架构总结/</id>
    <published>2018-09-08T03:30:47.000Z</published>
    <updated>2018-09-22T09:24:01.470Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script> <span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/images/nginx/nginx.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><blockquote><p>单台服务器已经无法承担大量用户的并发访问，必须采用多台服务器协同工作，以提高计算机系统的处理能力和计算强度（集群），满足当前业务量的需求。如何完成同样功能的多个网络设备之间实现合理的业务量分配——负载均衡。</p></blockquote><a id="more"></a><h1 id="Nginx应用场景"><a href="#Nginx应用场景" class="headerlink" title="Nginx应用场景"></a>Nginx应用场景</h1><h2 id="静态HTTP服务器"><a href="#静态HTTP服务器" class="headerlink" title="静态HTTP服务器"></a>静态HTTP服务器</h2><blockquote><p>首先，Nginx是一个HTTP服务器，可以将服务器上的静态文件（如HTML、图片）通过HTTP协议展现给客户端。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80; # 端口号</span><br><span class="line">  location / &#123;</span><br><span class="line">      root /usr/share/nginx/html; # 静态文件路径</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><blockquote><p>有的网站访问量大，需要负载均衡。然而并不是所有网站都如此出色，有的网站，由于访问量太小，需要节省成本，将多个网站部署在同一台服务器上。<br> 例如将<code>www.aaa.com</code>和<code>www.bbb.com</code>两个网站部署在同一台服务器上，两个域名解析到同一个IP地址，但是用户通过两个域名却可以打开两个完全不同的网站，互相不影响，就像访问两个服务器一样，所以叫两个虚拟主机。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    server_name _;</span><br><span class="line">    return 444; # 过滤其他域名的请求，返回444状态码</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.aaa.com; # www.aaa.com域名</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:8080; # 对应端口号8080</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.bbb.com; # www.bbb.com域名</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:8081; # 对应端口号8081</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在服务器8080和8081分别开了一个应用，客户端通过不同的域名访问，根据server_name可以反向代理到对应的应用服务器。<br> 虚拟主机的原理是通过HTTP请求头中的Host是否匹配server_name来实现的，有兴趣的同学可以研究一下HTTP协议。<br> 另外，server_name配置还可以过滤有人恶意将某些域名指向你的主机服务器</p></blockquote><h2 id="反向代理，负载均衡"><a href="#反向代理，负载均衡" class="headerlink" title="反向代理，负载均衡"></a>反向代理，负载均衡</h2><blockquote><p>当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，<br>需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载，<br>不会因为某台服务器负载高宕机而某台服务器闲置的情况。</p></blockquote><h3 id="正向代理VS反向代理"><a href="#正向代理VS反向代理" class="headerlink" title="正向代理VS反向代理"></a>正向代理VS反向代理</h3><blockquote><p>反向代理是指：以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给Internet上请求链接的客户端。<br> 正向代理：代理服务器代理内部网络对Internet的连接请求，客户机必须指定代理服务器，并将本来要直接发送到Web服务器上的http请求发送到代理服务器中。因为请求哪个Web服务器是不确定的，而且这些Web服务器并没有配置这个代理服务器，所以不支持外部对内部网络的访问请求</p></blockquote><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/images/nginx/nginx3.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/images/nginx/nginx4.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><h3 id="反向代理VS负载均衡"><a href="#反向代理VS负载均衡" class="headerlink" title="反向代理VS负载均衡"></a>反向代理VS负载均衡</h3><blockquote><p>反向代理，是把一些静态资源存储在服务器上，当用户有请求的时候，就直接返回反向代理服务器上的资源给用户，而如果反向代理服务器上没有的资源，就转发给后面的负载均衡服务器，负载均衡服务器再将请求分发给后端的web服务器。<br>区别就是：反向代理服务器是需要存储资源的，让用户更快速的接收到资源 负载均衡就是，为了保证后端web服务器的高可用，高并发，是不需要要存储资源，只需要转发用户的请求。</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">upstream myapp &#123;</span><br><span class="line">    server 192.168.0.111:8080; # 应用服务器1</span><br><span class="line">    server 192.168.0.112:8080; # 应用服务器2</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://myweb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡策略-算法"><a href="#负载均衡策略-算法" class="headerlink" title="负载均衡策略/算法"></a>负载均衡策略/算法</h3><blockquote><ul><li>轮询：依次分发到每台应用服务器上，所以每台处理请求数相同</li><li>加权轮询：按照配置的权重将请求分发，高性能的服务器分配更多请求。</li><li>随机：随机分配</li><li>加权随机：</li><li>最少连接：记录每个应用服务器正在处理的连接数，将新的请求分发到最少连接的服务器上。</li><li>加权最少连接</li><li>源地址散列：根据来源的IP地址进行Hash计算得到应用服务器，这样来自同一个IP地址的请求总在同一个服务器上处理。该请求的上下文信息可以存储在这台服务器上</li></ul></blockquote><h2 id="Nginx实践"><a href="#Nginx实践" class="headerlink" title="Nginx实践"></a>Nginx实践</h2><h3 id="session共享问题"><a href="#session共享问题" class="headerlink" title="session共享问题"></a>session共享问题</h3><blockquote><ol><li>不使用session，换用cookie,这样虽然实现简单，但是把session存在客户端会有很大的问题，如果客户端把cookie禁掉了的话，那么session就无从同步了，这样会给网站带来损失；cookie的安全性不高，虽然它已经加了密，但是还是可以伪造的。</li><li>可以通过ip_hash，将某个ip的请求定向到同一台后端应用服务器。但是这样可能会失去负载均衡的意义，因为有可能有的ip请求会很大，但是都分发到了一个服务器处理。</li><li>session复制，通过一次产生session就把这个session复制到其他服务器中，这样也会解决session一致性问题，但是这个会占用比较大的资源。</li><li>通过中间间做session缓存如用redis，这样没错分发到的服务器都从缓存里取一下看是否有session存在，达到session一致性，当然这个就会额外增加网络请求。</li></ol></blockquote><h3 id="nginx双机高可用"><a href="#nginx双机高可用" class="headerlink" title="nginx双机高可用"></a>nginx双机高可用</h3><blockquote><p>防止一台nginx宕掉，加一台备用机。<br> 方案一：正常情况下只有一台用于负载均衡，另一台空闲。可以用keepalive软件实现一台出问题时切换到另一台。<br> 方案二：两台都用于负载均衡。</p></blockquote><h2 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h2><blockquote><ul><li>启动nginx:<code>nginx</code></li><li>停止nginx:<code>nginx -s stop</code> 强制停止，<code>nginx -s quit</code> 优雅的退出</li><li>重载配置config:<code>nginx -s reload</code></li></ul></blockquote><div class="note info"><p><code>-s</code>都是采用向 Nginx 发送信号的方式</p></div><blockquote><ul><li>指定配置文件:<code>nginx -c /usr/local/......</code></li></ul></blockquote><div class="note info"><p><code>-c</code>表示configuration，指定配置文件</p></div><blockquote><ul><li>查看nginx版本信息:<code>nginx -v</code>,详细信息<code>nginx -V</code></li><li>检查配置文件是否正确:<code>nginx -t</code></li><li>显示帮助信息<code>nginx -h</code>或者<code>nginx -?</code></li></ul></blockquote><h1 id="Nginx配置文件详细说明"><a href="#Nginx配置文件详细说明" class="headerlink" title="Nginx配置文件详细说明"></a>Nginx配置文件详细说明</h1><h2 id="config文件结构"><a href="#config文件结构" class="headerlink" title="config文件结构"></a>config文件结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...    #全局块</span><br><span class="line">events &#123;   #events块</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line">http  #http块</span><br><span class="line">&#123;</span><br><span class="line"> ... #http全局块</span><br><span class="line"> server  #server块</span><br><span class="line"> &#123; </span><br><span class="line">  ...  #server全局块</span><br><span class="line">  location [PATTERN] #location块</span><br><span class="line">  &#123;</span><br><span class="line">   ...</span><br><span class="line">  &#125;</span><br><span class="line">  location [PATTERN] </span><br><span class="line">  &#123;</span><br><span class="line">   ...</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> server</span><br><span class="line"> &#123;</span><br><span class="line">  ...</span><br><span class="line"> &#125;</span><br><span class="line"> ...  #http全局块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1、全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。<br> 2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。<br> 3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。<br> 4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。<br> 5、location块：配置请求的路由，以及各种页面的处理情况。</p></blockquote><h2 id="配置文件config示例"><a href="#配置文件config示例" class="headerlink" title="配置文件config示例"></a>配置文件config示例</h2><p><strong>示例1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">########### 每个指令必须有分号结束。#################</span><br><span class="line">#user administrator administrators; #配置用户或者组，默认为nobody nobody。</span><br><span class="line">#worker_processes 2; #允许生成的进程数，默认为1</span><br><span class="line">#pid /nginx/pid/nginx.pid; #指定nginx进程运行文件存放地址</span><br><span class="line">error_log log/error.log debug; #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line">events &#123;</span><br><span class="line"> accept_mutex on; #设置网路连接序列化，防止惊群现象发生，默认为on</span><br><span class="line"> multi_accept on; #设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line"> #use epoll;  #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br><span class="line"> worker_connections 1024; #最大连接数，默认为512</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line"> include  mime.types; #文件扩展名与文件类型映射表</span><br><span class="line"> default_type application/octet-stream; #默认文件类型，默认为text/plain</span><br><span class="line"> #access_log off; #取消服务日志 </span><br><span class="line"> log_format myFormat &apos;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&apos;; #自定义格式</span><br><span class="line"> access_log log/access.log myFormat; #combined为日志格式的默认值</span><br><span class="line"> sendfile on; #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line"> sendfile_max_chunk 100k; #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br><span class="line"> keepalive_timeout 65; #连接超时时间，默认为75s，可以在http，server，location块。</span><br><span class="line"> </span><br><span class="line"> upstream mysvr &#123; </span><br><span class="line">  server 127.0.0.1:7878;</span><br><span class="line">  server 192.168.10.121:3333 backup; #热备</span><br><span class="line"> &#125;</span><br><span class="line"> error_page 404 https://www.baidu.com; #错误页</span><br><span class="line"> server &#123;</span><br><span class="line">  keepalive_requests 120; #单连接请求上限次数。</span><br><span class="line">  listen  4545; #监听端口</span><br><span class="line">  server_name 127.0.0.1; #监听地址  </span><br><span class="line">  location ~*^.+$ &#123;  #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">   #root path; #根目录</span><br><span class="line">   #index vv.txt; #设置默认页</span><br><span class="line">   proxy_pass http://mysvr; #请求转向mysvr 定义的服务器列表</span><br><span class="line">   deny 127.0.0.1; #拒绝的ip</span><br><span class="line">   allow 172.18.5.54; #允许的ip   </span><br><span class="line">  &#125; </span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure><div class="note info"><p>上面是nginx的基本配置，需要注意的有以下几点：</p><p>1、1.$remote_addr 与$http_x_forwarded_for 用以记录客户端的ip地址；<br>   2.$remote_user ：用来记录客户端用户名称；<br>   3.$time_local ： 用来记录访问时间与时区；<br>   4.$request ： 用来记录请求的url与http协议；<br>   5.$status ： 用来记录请求状态；成功是200，<br>   6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；<br>   7.$http_referer ：用来记录从那个页面链接访问过来的；<br>   8.$http_user_agent ：记录客户端浏览器的相关信息；</p><p>2、惊群现象：一个网路连接到来，多个睡眠的进程被同事叫醒，但只有一个进程能获得链接，这样会影响系统性能。</p><p>3、每个指令必须有分号结束。</p></div><p><strong>示例2：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">user www-data;  </span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes 1;</span><br><span class="line"> </span><br><span class="line">#全局错误日志及PID文件</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid    /var/run/nginx.pid;</span><br><span class="line"> </span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">  use  epoll;       #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br><span class="line">  worker_connections 1024;#单个后台worker process进程的最大并发链接数</span><br><span class="line">  # multi_accept on; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http &#123;</span><br><span class="line">   #设定mime类型,类型由mime.type文件定义</span><br><span class="line">  include    /etc/nginx/mime.types;</span><br><span class="line">  default_type application/octet-stream;</span><br><span class="line">  #设定日志格式</span><br><span class="line">  access_log  /var/log/nginx/access.log;</span><br><span class="line"> </span><br><span class="line">  #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</span><br><span class="line">  #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">  sendfile    on;</span><br><span class="line">  #tcp_nopush   on;</span><br><span class="line"> </span><br><span class="line">  #连接超时时间</span><br><span class="line">  #keepalive_timeout 0;</span><br><span class="line">  keepalive_timeout 65;</span><br><span class="line">  tcp_nodelay    on;</span><br><span class="line">   </span><br><span class="line">  #开启gzip压缩</span><br><span class="line">  gzip on;</span><br><span class="line">  gzip_disable &quot;MSIE [1-6]\.(?!.*SV1)&quot;;</span><br><span class="line"> </span><br><span class="line">  #设定请求缓冲</span><br><span class="line">  client_header_buffer_size  1k;</span><br><span class="line">  large_client_header_buffers 4 4k;</span><br><span class="line"> </span><br><span class="line">  include /etc/nginx/conf.d/*.conf;</span><br><span class="line">  include /etc/nginx/sites-enabled/*;</span><br><span class="line"> </span><br><span class="line">  #设定负载均衡的服务器列表</span><br><span class="line">   upstream mysvr &#123;</span><br><span class="line">  #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line">  #本机上的Squid开启3128端口</span><br><span class="line">  server 192.168.8.1:3128 weight=5;</span><br><span class="line">  server 192.168.8.2:80 weight=1;</span><br><span class="line">  server 192.168.8.3:80 weight=6;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  server &#123;</span><br><span class="line">  #侦听80端口</span><br><span class="line">    listen    80;</span><br><span class="line">    #定义使用www.xx.com访问</span><br><span class="line">    server_name www.xx.com;</span><br><span class="line"> </span><br><span class="line">    #设定本虚拟主机的访问日志</span><br><span class="line">    access_log logs/www.xx.com.access.log main;</span><br><span class="line"> </span><br><span class="line">  #默认请求</span><br><span class="line">  location / &#123;</span><br><span class="line">     root  /root;   #定义服务器的默认网站根目录位置</span><br><span class="line">     index index.php index.html index.htm;  #定义首页索引文件的名称</span><br><span class="line"> </span><br><span class="line">     fastcgi_pass www.xx.com;</span><br><span class="line">     fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name; </span><br><span class="line">     include /etc/nginx/fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  # 定义错误提示页面</span><br><span class="line">  error_page  500 502 503 504 /50x.html; </span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">    root  /root;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  #静态文件，nginx自己处理</span><br><span class="line">  location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">    root /var/www/virtual/htdocs;</span><br><span class="line">    #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。</span><br><span class="line">    expires 30d;</span><br><span class="line">  &#125;</span><br><span class="line">  #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</span><br><span class="line">  location ~ \.php$ &#123;</span><br><span class="line">    root /root;</span><br><span class="line">    fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    fastcgi_param SCRIPT_FILENAME /home/www/www$fastcgi_script_name;</span><br><span class="line">    include fastcgi_params;</span><br><span class="line">  &#125;</span><br><span class="line">  #设定查看Nginx状态的地址</span><br><span class="line">  location /NginxStatus &#123;</span><br><span class="line">    stub_status      on;</span><br><span class="line">    access_log       on;</span><br><span class="line">    auth_basic       &quot;NginxStatus&quot;;</span><br><span class="line">    auth_basic_user_file conf/htpasswd;</span><br><span class="line">  &#125;</span><br><span class="line">  #禁止访问 .htxxx 文件</span><br><span class="line">  location ~ /\.ht &#123;</span><br><span class="line">    deny all;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>示例3：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http &#123;</span><br><span class="line">   #设定mime类型,类型由mime.type文件定义</span><br><span class="line">  include    /etc/nginx/mime.types;</span><br><span class="line">  default_type application/octet-stream;</span><br><span class="line">  #设定日志格式</span><br><span class="line">  access_log  /var/log/nginx/access.log;</span><br><span class="line"> </span><br><span class="line">  #省略上文有的一些配置节点</span><br><span class="line"> </span><br><span class="line">  #。。。。。。。。。。</span><br><span class="line"> </span><br><span class="line">  #设定负载均衡的服务器列表</span><br><span class="line">   upstream mysvr &#123;</span><br><span class="line">  #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line">  server 192.168.8.1x:3128 weight=5;#本机上的Squid开启3128端口</span><br><span class="line">  server 192.168.8.2x:80 weight=1;</span><br><span class="line">  server 192.168.8.3x:80 weight=6;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  upstream mysvr2 &#123;</span><br><span class="line">  #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line"> </span><br><span class="line">  server 192.168.8.x:80 weight=1;</span><br><span class="line">  server 192.168.8.x:80 weight=6;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  #第一个虚拟服务器</span><br><span class="line">  server &#123;</span><br><span class="line">  #侦听192.168.8.x的80端口</span><br><span class="line">    listen    80;</span><br><span class="line">    server_name 192.168.8.x;</span><br><span class="line"> </span><br><span class="line">   #对aspx后缀的进行负载均衡请求</span><br><span class="line">  location ~ .*\.aspx$ &#123;</span><br><span class="line"> </span><br><span class="line">     root  /root;   #定义服务器的默认网站根目录位置</span><br><span class="line">     index index.php index.html index.htm;  #定义首页索引文件的名称</span><br><span class="line"> </span><br><span class="line">     proxy_pass http://mysvr ;#请求转向mysvr 定义的服务器列表</span><br><span class="line"> </span><br><span class="line">     #以下是一些反向代理的配置可删除.</span><br><span class="line"> </span><br><span class="line">     proxy_redirect off;</span><br><span class="line"> </span><br><span class="line">     #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">     proxy_set_header Host $host;</span><br><span class="line">     proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">     client_max_body_size 10m;  #允许客户端请求的最大单文件字节数</span><br><span class="line">     client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">     proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">     proxy_send_timeout 90;    #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">     proxy_read_timeout 90;     #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">     proxy_buffer_size 4k;       #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">     proxy_buffers 4 32k;        #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span><br><span class="line">     proxy_busy_buffers_size 64k;  #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">     proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="正在表达式及其他相关配置"><a href="#正在表达式及其他相关配置" class="headerlink" title="正在表达式及其他相关配置"></a>正在表达式及其他相关配置</h2><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><blockquote><p>主机名匹配应用策略：（优先级）由高到底：<br> （1）首先精确匹配；<br> （2）左侧<em>通配符匹配；<br> （3）右侧</em>通配符匹配；<br> （4）正则表达式模式匹配；</p></blockquote><blockquote><p>根据用户请求的URI来匹配定义的多个location，匹配到时，此请求将被相应的location块中的配置指令所处理；<br> （1）location [ = | ~ | ~<em> | ^~ ] uri { … }<br> （2）location @name {…}<br> 匹配优先级：=、^~、~/~</em>、不带符号；<br> =：URI精确匹配；用户给定的URI与location中的完成一样；<br> ^~：对URI左半部分做匹配检查，不区分字符大小写；<br> ~：做正则表达式模式匹配，区分字符大小写；<br> ~*：做正则表达式模式匹配，不区分字符大小写；</p></blockquote><h3 id="alias-path"><a href="#alias-path" class="headerlink" title="alias path"></a>alias path</h3><blockquote><p>定义路径别名，也是文档映射的一种机制，只能用在location上下文；<br> 注意：<br> root指令：给定的路径对应于location中/uri/左侧的/；<br> alias指令：给定的路径对应于location中的/uri/右侧的/（这个url），而不包含uri本身；</p></blockquote><div class="note info"><p>例如：<br>  请求资源：<code>http://www.magedu.com/bbs/a.jpg</code><br>  对应资源：<code>http://www.magedu.com/web/forum/a.jpg</code><br>  文件路径：<code>/web/forum/a.jpg</code></p></div> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /bbs/ &#123;</span><br><span class="line"></span><br><span class="line">   alias /web/forum/;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><blockquote><p>相当于访问的是：/web/forum/a.jpg;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /bbs/ &#123;</span><br><span class="line"></span><br><span class="line">    root /web/forum/;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>相当于访问的是：/web/forum/bbs/a.jpg</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/images/nginx/nginx.jpg&quot; class=&quot;full-image&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;blockquote&gt;
&lt;p&gt;单台服务器已经无法承担大量用户的并发访问，必须采用多台服务器协同工作，以提高计算机系统的处理能力和计算强度（集群），满足当前业务量的需求。如何完成同样功能的多个网络设备之间实现合理的业务量分配——负载均衡。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://shuxiaohao.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://shuxiaohao.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Git基础及常用命令总结</title>
    <link href="http://shuxiaohao.github.io/2018/09/03/Git%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://shuxiaohao.github.io/2018/09/03/Git基础及常用命令总结/</id>
    <published>2018-09-03T09:45:15.000Z</published>
    <updated>2018-09-21T14:09:40.352Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script> <span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/images/git/git_logo.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><a id="more"></a><div class="note success"><p>Git我已经用了很久了，但最近同事工作期间还会出现一些由于Git代码提交的冲突，带来一些麻烦。<br>    下面我会结合我所学知识，及对Git再系统学习后总结一下Git的一些基本流程及常用命令的一些用法。</p></div><h1 id="本地基本命令"><a href="#本地基本命令" class="headerlink" title="本地基本命令"></a>本地基本命令</h1><h2 id="Git常用命令速查表"><a href="#Git常用命令速查表" class="headerlink" title="Git常用命令速查表:"></a>Git常用命令速查表:</h2><p><img src="/images/git/git常用命令速查表.jpg" alt="git常用命令速查表"></p><h2 id="使用Git生成秘钥"><a href="#使用Git生成秘钥" class="headerlink" title="使用Git生成秘钥"></a>使用Git生成秘钥</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><h2 id="设置全局用户名和邮箱"><a href="#设置全局用户名和邮箱" class="headerlink" title="设置全局用户名和邮箱:"></a>设置全局用户名和邮箱:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;YourName&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;#添加指定文件到暂存区</span><br><span class="line">git add .#添加工作区所有文件到暂存区</span><br><span class="line">git add -i#交互方式添加文件到暂存区</span><br><span class="line">git add -u#将工作区中已经变动的文件添加到暂存区，当新增加的文件不会被添加</span><br></pre></td></tr></table></figure><h2 id="提交文件到本地仓库"><a href="#提交文件到本地仓库" class="headerlink" title="提交文件到本地仓库"></a>提交文件到本地仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;描述信息&quot;#提交更新</span><br><span class="line">git commit -am &quot;描述信息&quot;#如果工作目录中仅是已跟踪的文件被修改或被删除，使用此提交命令</span><br></pre></td></tr></table></figure><h2 id="分支的创建、删除、和平、切换、查看"><a href="#分支的创建、删除、和平、切换、查看" class="headerlink" title="分支的创建、删除、和平、切换、查看"></a>分支的创建、删除、和平、切换、查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git branch#查看Git仓库中已有的分支</span><br><span class="line">git branch 新分支名 [分支起点]#创建分支，如果没有分支起点的话，则默认在当前分支的最新提交上创建分支</span><br><span class="line">git checkout 分支名#切换分支</span><br><span class="line">git checkout -b 新分支名#创建同时切换到新分支</span><br><span class="line">git merge 要被合并的分支名#合并分支</span><br><span class="line">git branch -d 要删除的分支名#删除指定分支（如果分支没有被合并过，该命令会执行失败）</span><br><span class="line">git branch -D 要删除的分支名#删除指定分支，不管有没有被合并过</span><br><span class="line">gitk#用图形界面查看分支提交历史</span><br></pre></td></tr></table></figure><blockquote><p>合并分支过程中如果发生冲突则需要自己手动解决冲突，然后再提交。<br>有冲突时，Git会显示哪个文件有冲突，并在冲突的文件中加上特殊的标识符号，解决完冲突后，要手动去掉这些被添加的标识符号。<br>如果冲突比较复杂的话，最好使用其他工具来协助，通过git mergetool来启动。<br>冲突一般是在不同的分支上对同一文件的同一位置内容进行了改动，并已提交到仓库中，这样在合并的时候就会发生冲突。</p></blockquote><h2 id="标签的添加、删除、查看"><a href="#标签的添加、删除、查看" class="headerlink" title="标签的添加、删除、查看"></a>标签的添加、删除、查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git tag#查看标签</span><br><span class="line">git tag 标签名#创建简单的标签</span><br><span class="line">git tag -a 标签名 -m &apos;附加信息&apos;#创建附加信息的标签</span><br><span class="line">git show 标签名#通过标签查看信息</span><br><span class="line">git tag -d 标签名#删除标签</span><br></pre></td></tr></table></figure><blockquote><p>标签可以在需要的地方，为某个提交对象创建别名，这样以后我们就可以通过标签来查看一些信息，创建分支等。</p></blockquote><h2 id="查看工作目录状态"><a href="#查看工作目录状态" class="headerlink" title="查看工作目录状态"></a>查看工作目录状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><blockquote><p>在git命令执行后，要养成通过git status查看git状态的习惯，以便及时了解文件变化的情况。<br>通过git status可以知道文件的状态（已修改未暂存、已删除、已修改并已暂存等待提交、未跟踪）。</p></blockquote><h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git log -p#显示每次提交文件变化</span><br></pre></td></tr></table></figure><blockquote><p>通过git log可以查看当前分支的所有提交历史，知道每次提交的commit对象的ID以及提交时附加的描述信息等。<br>要显示更多的信息，需要使用其支持的选项，如git log -p可以将每次提交的文件变化也显示出来。</p></blockquote><h2 id="查看指定的提交对象"><a href="#查看指定的提交对象" class="headerlink" title="查看指定的提交对象"></a>查看指定的提交对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git show commit_id#查看指定的某次提交内容</span><br><span class="line">git show --all#显示所有的提交历史内容</span><br><span class="line">git shortlog -s -n#显示总的提交次数</span><br></pre></td></tr></table></figure><blockquote><p>通过<code>git log</code>可以显示整个提交历史，而通过<code>git show commit-id</code>则可以查看指定的某次提交内容，<br>当然<code>git show -all</code>也可以显示出提交历史，另外还可以格式化显示内容。</p></blockquote><p><strong>Note : commit-id可以是commit对象对应的ID，也可以是HEAD，分支名，tag等。</strong></p><h2 id="查看工作区、暂存区、仓库之间的差异"><a href="#查看工作区、暂存区、仓库之间的差异" class="headerlink" title="查看工作区、暂存区、仓库之间的差异"></a>查看工作区、暂存区、仓库之间的差异</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git diff#比较工作区与暂存区的差异</span><br><span class="line">git diff HEAD#比较工作区与仓库中最近一次的提交间的差异</span><br><span class="line">git diff --cached#比较暂存区与仓库中最近一次提交的差异</span><br><span class="line">git blame filename#可以列出该文件每次被修改的时间和内容。</span><br></pre></td></tr></table></figure><h2 id="版本回退、撤销操作"><a href="#版本回退、撤销操作" class="headerlink" title="版本回退、撤销操作"></a>版本回退、撤销操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git reflog#显示提交历史的简介</span><br><span class="line">git checkout -- filename#丢弃工作区的修改</span><br><span class="line">git reset --hard HEAD^#回退到上一个版本</span><br><span class="line">git reset --hard commit_id#回退到指定版本</span><br><span class="line">git checkout -- filename#恢复工作区被删除的指定文件（文件之前被提交到仓库中）</span><br><span class="line">git checkout -f #恢复工作区中所有被删除的文件(文件之前被提交到仓库中)</span><br><span class="line">git ls-files -d#列出工作区被删除的文件（文件之前被提交到仓库中）</span><br></pre></td></tr></table></figure><blockquote><p>有时候，由于我们的误操作，产生了一些错误，我们发现后希望能够及时纠正这些因为误操作而产生的结果，<br>将工作目录恢复到某个正常状态。</p></blockquote><ul><li>撤销修改，但还没有添加到暂存区： <code>git checkout -- filename</code>修改的文件会被恢复到上次提交时的状态，修改的内容会丢失。</li><li>版本回退：先通过<code>git reflog</code>找到某个版本的<code>commit_id</code>，然后用<code>git reset --hard commit_id</code>将工作目录的文件恢复到指定的版本。</li><li>恢复工作区中被删除的文件（文件之前被提交到仓库中）：<code>git checkout -- filename 或 git checkout -f</code></li></ul><h2 id="备份工作区"><a href="#备份工作区" class="headerlink" title="备份工作区"></a>备份工作区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git stash#将工作区文件保存在Git内部栈中</span><br><span class="line">git stash list#列出Git内部栈中保存的工作区文件列表</span><br><span class="line">git stash apply stash_id#恢复工作区到指定的内部栈状态</span><br><span class="line">git stash pop#恢复工作区到上一个内部栈状态</span><br><span class="line">git stash clear#清空Git内部栈</span><br></pre></td></tr></table></figure><blockquote><p>如果正在一个develop分支上正在开发新功能，但这时master分支(稳定版本)突然发现了bug，并需要及时修复，<br>而develop分支此时的工作还没有完成，且不希望将之前的工作就这样提交到仓库中时，<br>这时就可以用<code>git stash</code>来暂时保存这些状态到Git内部栈中，并用当前分支上一次的提交内容来恢复工作目录，<br>然后切换到master分支进行bug修复工作，等修复完毕并提交到仓库上后，再使用<code>git stash apply [stash@{0}]</code><br>或者<code>git stash pop</code>将工作目录恢复到之前的状态，继续之前的工作。</p></blockquote><blockquote><p>同时也可以多次使用<code>git stash</code>将未提交的代码压入到Git栈中，但当多次使用<code>git stash</code>命令后，<br>Git栈里将充满了未提交的代码，这时候到底要用哪个版本来恢复工作目录呢？<code>git stash list</code>命令可以将当前的Git栈信息打印出来，<br>我们只需要将找到对应的版本号，例如使用<code>git stash apply stash@{1}</code>就可以用版本号为stash@{1}的内容来恢复工作目录。</p></blockquote><blockquote><p>当Git栈中所有的内容都被恢复后，可以使用<code>git stash clear</code>来将栈清空。</p></blockquote><h2 id="将当前工作区目录文件压缩归档"><a href="#将当前工作区目录文件压缩归档" class="headerlink" title="将当前工作区目录文件压缩归档"></a>将当前工作区目录文件压缩归档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git archive --format=zip -o arch.zip HEAD</span><br><span class="line">git arch --format zip head&gt;arch.zip</span><br></pre></td></tr></table></figure><h1 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h1><blockquote><p>Git相比其他版本控制软件的一个优点就是大多数的操作都可以在本地进行，而不用管远程的仓库，因为操作是在本地，<br>且操作的数据也是在本地，加上指针等原因，所以执行的速度就会比较快。 在多人协作的项目中，就需要涉及与远程仓库交互的问题，<br>主要是如何从远程仓库抓取最新数据合并到自己的本地分支上，将自己的最新成果分享给其他人或让别人审查等 。</p></blockquote><h2 id="远程仓库的克隆、添加、查看"><a href="#远程仓库的克隆、添加、查看" class="headerlink" title="远程仓库的克隆、添加、查看"></a>远程仓库的克隆、添加、查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git remote#显示已添加的远程仓库名</span><br><span class="line">git remote -v #显示已添加的远程仓库名和地址</span><br><span class="line">git remote add 远程仓库名 远程仓库地址#在本地添加远程仓库</span><br><span class="line">git remote rm 远程仓库名#删除本地添加的远程仓库名</span><br><span class="line">git remote rename 原名 新名#重命名远程仓库名</span><br><span class="line">git clone 远程仓库地址 [克隆到指定的文件夹]#克隆远程仓库到本地</span><br><span class="line">git fetch 远程仓库名#从远程仓库抓取最新数据到本地但不与本地分支进行合并 </span><br><span class="line">git pull 远程仓库名本地要合并的分支名#从远程仓库抓取最新数据并自动与本地分支进行合并</span><br><span class="line">git push 远程仓库名 本地分支名#将本地仓库推送到远程仓库中</span><br><span class="line">git remote show 远程仓库名#查看远程仓库信息</span><br><span class="line">git remote show#查看所有远程仓库</span><br><span class="line">git push 远程仓库名 标签名#将标签推送到远程仓库（Git默认不推送标签）</span><br></pre></td></tr></table></figure><h2 id="协同流程"><a href="#协同流程" class="headerlink" title="协同流程"></a>协同流程</h2><ul><li>Fork远程项目</li><li>把Fork的项目clone到本地</li><li>执行以下命令，将别人的库添加为远端库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add 远端仓库名 远端的分支</span><br></pre></td></tr></table></figure><ul><li>运行以下命令，拉去合并到本地</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull 远端仓库名 远端分支名</span><br></pre></td></tr></table></figure><ul><li>编辑内容</li><li>commit之后push到自己的库</li><li>登录Github，在你的首页可以看到一个pull request按钮，点击它，填写一些说明信息，提交即可。</li></ul><blockquote><p>在本地编辑内容前必须执行pull操作同步别人的远端库（这样避免冲突）</p></blockquote><h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><blockquote><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再使用<code>git stash pop</code>，回到工作现场.</p></blockquote><h2 id="多人协作技巧"><a href="#多人协作技巧" class="headerlink" title="多人协作技巧"></a>多人协作技巧</h2><blockquote><p>查看远程库信息，使用<code>git remote -v</code>；<br> 本地新建的分支如果不推送到远程，对其他人就是不可见的；<br> 从本地推送分支，使用<code>git push</code> 远程仓库名 分支名，如果推送失败，先用<code>git pull</code>抓取远程的新提交；<br> 在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；<br> 建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；<br> 从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p></blockquote><h2 id="Git常用命令思维导图"><a href="#Git常用命令思维导图" class="headerlink" title="Git常用命令思维导图"></a>Git常用命令思维导图</h2><p><img src="/images/git/gitdown.jpg" alt="git常用命令速查表"></p>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/images/git/git_logo.jpg&quot; class=&quot;full-image&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
    
    </summary>
    
      <category term="团队协作" scheme="http://shuxiaohao.github.io/categories/%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C/"/>
    
    
      <category term="Git" scheme="http://shuxiaohao.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
